p2 = ggplot(dat, aes(x=sub, y=m)) +
geom_point() +
coord_cartesian(ylim=c(0,100)) +
theme_minimal()+
xlab("subsampling proportion of background sequences") +
ylab("mean cluster size")
plot(p2)
require(gridExtra)
p_both = ggarrange(p,p2, labels=c("A", "B"))
require(gridExtra)
require(ggpubr)
p_both = ggarrange(p,p2, labels=c("A", "B"))
plot(p_both)
p_both = ggarrange(p,p2, labels=c("A", "B"), ncol = 1)
plot(p_both)
ggsave(plot=p_both, filename=paste(path, "/figures/subsampling_mean.png", sep=""), height=5, width=7)
source('~/Documents/github/hCoV-19_WA/scripts/clusterPlots.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/clusterPlots.R', echo=TRUE)
p = ggplot(dat, aes(x=sub, y=nr)) +
geom_smooth() +
geom_point() +
coord_cartesian(ylim=c(0,max(dat$nr))) +
theme_minimal()+
xlab("subsampling proportion of background sequences") +
ylab("number of clusters")
plot(p)
source('~/Documents/github/hCoV-19_WA/scripts/clusterPlots.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Simulation/TopologyInference/plotRates.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_speciesTree.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_ratesOnTree.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_nodeHeights.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotChimps_ratesOnTree.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotChimps_nodeHeights.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_speciesTree.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotChimps_nodeHeights.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_nodeHeights.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_nodeHeights.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_ratesOnTree.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_ratesOnTree.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_ratesOnTree.R', echo=TRUE)
install_github
library("devtools")
install_github
install_github(https://github.com/thibautjombart/OutbreakTools)
install_github("thibautjombart/OutbreakTools")
install_github("thibautjombart/OutbreakTools")
source("annotatedTreeReader.R")
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_ratesOnTree.R', echo=TRUE)
source("annotatedTreeReader.R")
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_ratesOnTree.R', echo=TRUE)
sum(tree_has_true_topology)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/plotGA_ratesOnTree.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
species_trees <- read.nexus(file=out_file,force.multi=T) # get all the tree topologies in the posterior
tot.trees = 0
for (j in seq(1, length(species_trees))){
post.occurance = strsplit(names(species_trees)[[j]], split="_")[[1]]
tot.trees = tot.trees + as.numeric(post.occurance[[length(post.occurance)]])
}
print(i)
# plots the most likely species tree for each run
for (j in seq(1, min(1,length(species_trees)))){
plot_tree <- ladderize(species_trees[[j]], right=F) # ladderizes the tree (defines the node orderign on the x-axis for the plot)
pl <- plotSpeciesTree(out_file, names(species_trees)[[j]], plot_tree, posterior.threshold, BF.threshold, prior, forwards.arrows) # returns a ggplot object that can be modified
post.occurance = strsplit(names(species_trees)[[j]], split="_")[[1]] # get how often this ranked topology was observed in the posterior
pl <- pl +
ylab("substitutions per site") + # labels the y-axis
scale_size_continuous(range=c(0.1,1)) + # defines the range of arrow sizes
ggtitle(paste("posterior support = ", round(as.numeric(post.occurance[[length(post.occurance)]])/tot.trees,2), "", sep="")) + # specify the title
theme_minimal() + # changes the plotting theme
# coord_cartesian(xlim=c(2.5,8.5), ylim=c(0,0.015)) +
coord_cartesian(xlim=c(0,8.5), ylim=c(0,0.2)) +
scale_size_continuous(limits=c(0.5,1), range=c(0.1,1), breaks=c(0.5,0.75,1), name="posterior support\nfor gene flow")+
scale_y_continuous(sec.axis = sec_axis(~ ./(clock_rate), name="Years in Million"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
xlab("")
plot(pl)
p[[l_count]] = pl
l_count = l_count+1
}
# plots the most likely species tree for each run
for (j in seq(1, min(1,length(species_trees)))){
plot_tree <- ladderize(species_trees[[j]], right=F) # ladderizes the tree (defines the node orderign on the x-axis for the plot)
pl <- plotSpeciesTree(out_file, names(species_trees)[[j]], plot_tree, posterior.threshold, BF.threshold, prior, forwards.arrows) # returns a ggplot object that can be modified
post.occurance = strsplit(names(species_trees)[[j]], split="_")[[1]] # get how often this ranked topology was observed in the posterior
pl <- pl +
ylab("substitutions per site") + # labels the y-axis
scale_size_continuous(range=c(0.1,1)) + # defines the range of arrow sizes
ggtitle(paste("posterior support = ", round(as.numeric(post.occurance[[length(post.occurance)]])/tot.trees,2), "", sep="")) + # specify the title
theme_minimal() + # changes the plotting theme
# coord_cartesian(xlim=c(2.5,8.5), ylim=c(0,0.015)) +
coord_cartesian(xlim=c(0,8.5), ylim=c(0,0.2)) +
scale_size_continuous(limits=c(0.5,1), range=c(0.1,1), breaks=c(0.5,0.75,1), name="posterior support\nfor gene flow")
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
xlab("")
plot(pl)
p[[l_count]] = pl
l_count = l_count+1
}
# plots the most likely species tree for each run
for (j in seq(1, min(1,length(species_trees)))){
plot_tree <- ladderize(species_trees[[j]], right=F) # ladderizes the tree (defines the node orderign on the x-axis for the plot)
pl <- plotSpeciesTree(out_file, names(species_trees)[[j]], plot_tree, posterior.threshold, BF.threshold, prior, forwards.arrows) # returns a ggplot object that can be modified
post.occurance = strsplit(names(species_trees)[[j]], split="_")[[1]] # get how often this ranked topology was observed in the posterior
pl <- pl +
ylab("substitutions per site") + # labels the y-axis
scale_size_continuous(range=c(0.1,1)) + # defines the range of arrow sizes
ggtitle(paste("posterior support = ", round(as.numeric(post.occurance[[length(post.occurance)]])/tot.trees,2), "", sep="")) + # specify the title
theme_minimal() + # changes the plotting theme
# coord_cartesian(xlim=c(2.5,8.5), ylim=c(0,0.015)) +
coord_cartesian(xlim=c(0,8.5), ylim=c(0,0.02)) +
scale_size_continuous(limits=c(0.5,1), range=c(0.1,1), breaks=c(0.5,0.75,1), name="posterior support\nfor gene flow")
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
xlab("")
plot(pl)
p[[l_count]] = pl
l_count = l_count+1
}
# plots the most likely species tree for each run
for (j in seq(1, min(1,length(species_trees)))){
plot_tree <- ladderize(species_trees[[j]], right=F) # ladderizes the tree (defines the node orderign on the x-axis for the plot)
pl <- plotSpeciesTree(out_file, names(species_trees)[[j]], plot_tree, posterior.threshold, BF.threshold, prior, forwards.arrows) # returns a ggplot object that can be modified
post.occurance = strsplit(names(species_trees)[[j]], split="_")[[1]] # get how often this ranked topology was observed in the posterior
pl <- pl +
ylab("substitutions per site") + # labels the y-axis
scale_size_continuous(range=c(0.1,1)) + # defines the range of arrow sizes
ggtitle(paste("posterior support = ", round(as.numeric(post.occurance[[length(post.occurance)]])/tot.trees,2), "", sep="")) + # specify the title
theme_minimal() + # changes the plotting theme
# coord_cartesian(xlim=c(2.5,8.5), ylim=c(0,0.015)) +
coord_cartesian(xlim=c(0,8.5), ylim=c(0,0.01)) +
scale_size_continuous(limits=c(0.5,1), range=c(0.1,1), breaks=c(0.5,0.75,1), name="posterior support\nfor gene flow")
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
xlab("")
plot(pl)
p[[l_count]] = pl
l_count = l_count+1
}
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
species_trees <- read.nexus(file=out_file,force.multi=T) # get all the tree topologies in the posterior
# compute total number of trees, only works if Minimal tree support for output was 0 in AIM ann
tot.trees = 0
for (j in seq(1, length(species_trees))){
post.occurance = strsplit(names(species_trees)[[j]], split="_")[[1]]
tot.trees = tot.trees + as.numeric(post.occurance[[length(post.occurance)]])
}
print(i)
# plots the most likely species tree for each run
for (j in seq(1, min(1,length(species_trees)))){
plot_tree <- ladderize(species_trees[[j]], right=F) # ladderizes the tree (defines the node orderign on the x-axis for the plot)
pl <- plotSpeciesTree(out_file, names(species_trees)[[j]], plot_tree, posterior.threshold, BF.threshold, prior, forwards.arrows) # returns a ggplot object that can be modified
post.occurance = strsplit(names(species_trees)[[j]], split="_")[[1]] # get how often this ranked topology was observed in the posterior
pl <- pl +
ylab("substitutions per site") + # labels the y-axis
scale_size_continuous(range=c(0.1,1)) + # defines the range of arrow sizes
ggtitle(paste("posterior support = ", round(as.numeric(post.occurance[[length(post.occurance)]])/tot.trees,2), "", sep="")) + # specify the title
theme_minimal() + # changes the plotting theme
# coord_cartesian(xlim=c(2.5,8.5), ylim=c(0,0.015)) +
coord_cartesian(xlim=c(0,8.5), ylim=c(0,0.01)) +
scale_size_continuous(limits=c(0.5,1), range=c(0.1,1), breaks=c(0.5,0.75,1), name="posterior support\nfor gene flow")
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
xlab("")
plot(pl)
p[[l_count]] = pl
l_count = l_count+1
}
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
clusters
clusters = read.table(paste(path, '/', 'results/cluster_assignment.tsv', sep=''), sep='\t', header = T)
clusters
clusters$date = c();
clusters$aa = c();
clusters$mutations = c();
for (i in seq(1,length(clusters$cluster))){
ind = which(muts$Sequence==as.character(clusters[i, "strain"]))
if (length(ind==1)){
clusters[i, "date"] = muts[ind, "Date"]
clusters[i, "aa"] = muts[ind, "AA"]
clusters[i, "mutations"] = muts[ind, "Mutations"]
}
}
clusters = clusters[-which(is.na(clusters$aa)), ]
clusters$date = as.Date(clusters$date)
uni_cl = unique(clusters$cluster)
uni_cl\
uni_cl
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
clusters
clusters$aa
is.na(clusters$aa)
clusters = clusters[-which(is.na(clusters$aa)), ]
clusters
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
which(is.na(clusters$aa))
clusters
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
trees
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
which(is.na(clusters$aa))
clusters
clusters
clusters[-which(is.na(clusters$aa)),]
which(is.na(clusters$aa))
clusters
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
dat = dat[which(dat$first<as.Date("2020-06-01") & dat$first>as.Date("2020-02-01")),]
dat$date_num = as.numeric(dat$first)
sum.vals = data.frame()
for (i in seq(1,1)){
dat$isSuccess = 1
dat[which(dat$size <= i), "isSuccess"]=0
dat$ratio = dat$mAA_min/dat$mMutations_min
dat$syn = dat$mMutations_min - dat$mAA_min
s = glm(isSuccess ~ date_num + syn + mAA_min + 1, family=binomial, dat)
sum.dat = summary(s)
sum.vals = rbind(sum.vals, data.frame(cutoff = i,
intercept=round(sum.dat$coefficients[1,4],3),
date=round(sum.dat$coefficients[2,4],3),
synonymous=round(sum.dat$coefficients[3,4],3),
non_synonymous=round(sum.dat$coefficients[4,4],3)))
}
p.t=grid.table(sum.vals)
p1=ggplot(dat,aes(x=syn, y=isSuccess)) +
geom_count() +
geom_smooth(method = lm) +
xlab("rna substitutions first sample") +
ylab("introduction led to\ndetected local transmission") +
theme_minimal()+
coord_cartesian(ylim=c(-0.1,1.1))
p2=ggplot(dat,aes(x=mAA_min, y=isSuccess)) +
geom_count() +
geom_smooth(method = lm) +
xlab("AA substitutions first sample") +
ylab("introduction led to\ndetected local transmission") +
theme_minimal() +
coord_cartesian(ylim=c(-0.1,1.1))
p3=ggplot(dat,aes(x=first, y=isSuccess)) +
geom_count() +
geom_smooth(method = lm) +
xlab("time first sample") +
ylab("introduction led to\ndetected local transmission") +
theme_minimal()+
coord_cartesian(ylim=c(-0.1,1.1))
library("gridExtra")
library("ggpubr")
p = ggarrange(p1, p2, p3, tableGrob(round(sum.dat$coefficients,4)),
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
plot(p)
ggsave(p, file=paste(path, "/figures/syn_non_syn.pdf", sep=""), width=10, height=6)
ggsave(p, file=paste(path, "/figures/syn_non_syn.png", sep=""), width=10, height=6)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
p1=ggplot(dat,aes(x=syn, y=isSuccess)) +
geom_count() +
geom_smooth(method = lm) +
geom_smooth() +
xlab("rna substitutions first sample") +
ylab("introduction led to\ndetected local transmission") +
theme_minimal()+
coord_cartesian(ylim=c(-0.1,1.1))
p2=ggplot(dat,aes(x=mAA_min, y=isSuccess)) +
geom_count() +
geom_smooth(method = lm) +
geom_smooth() +
xlab("AA substitutions first sample") +
ylab("introduction led to\ndetected local transmission") +
theme_minimal() +
coord_cartesian(ylim=c(-0.1,1.1))
p3=ggplot(dat,aes(x=first, y=isSuccess)) +
geom_count() +
geom_smooth(method = lm) +
geom_smooth() +
xlab("time first sample") +
ylab("introduction led to\ndetected local transmission") +
theme_minimal()+
coord_cartesian(ylim=c(-0.1,1.1))
library("gridExtra")
library("ggpubr")
p = ggarrange(p1, p2, p3, tableGrob(round(sum.dat$coefficients,4)),
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
plot(p)
ggsave(p, file=paste(path, "/figures/syn_non_syn.png", sep=""), width=10, height=6)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
plot(p)
ggsave(p, file=paste(path, "/figures/syn_non_syn.png", sep=""), width=10, height=6)
p1=ggplot(dat,aes(x=syn, y=isSuccess)) +
geom_count() +
geom_smooth(method = lm) +
xlab("RNA substitutions first sample") +
ylab("introduction led to\ndetected local transmission") +
theme_minimal()+
coord_cartesian(ylim=c(-0.1,1.1))
p2=ggplot(dat,aes(x=mAA_min, y=isSuccess)) +
geom_count() +
geom_smooth(method = lm) +
xlab("AA substitutions first sample") +
ylab("introduction led to\ndetected local transmission") +
theme_minimal() +
coord_cartesian(ylim=c(-0.1,1.1))
p3=ggplot(dat,aes(x=first, y=isSuccess)) +
geom_count() +
geom_smooth(method = lm) +
xlab("time first sample") +
ylab("introduction led to\ndetected local transmission") +
theme_minimal()+
coord_cartesian(ylim=c(-0.1,1.1))
library("gridExtra")
library("ggpubr")
p = ggarrange(p1, p2, p3, tableGrob(round(sum.dat$coefficients,4)),
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
plot(p)
ggsave(p, file=paste(path, "/figures/syn_non_syn.png", sep=""), width=10, height=6)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
sum.vals
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
name.intro
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/plotTree.R', echo=TRUE)
clade
source('~/Documents/github/hCoV-19_WA/scripts/plotTree.R', echo=TRUE)
tr$tip.label[i]
id
ind
cluster$strain
cluster$strain==tr$tip.label[i]
which(cluster$strain==tr$tip.label[i])
tr$tip.label[i]
ind
source('~/Documents/github/hCoV-19_WA/scripts/plotTree.R', echo=TRUE)
cluster$strain
View(cluster)
tr$tip.label[i]
meta.wa$strain
tr$tip.label[i]
meta.wa[ind,]
ind
which(meta.wa$strain==tr$tip.label[i])
source('~/Documents/github/hCoV-19_WA/scripts/plotTree.R', echo=TRUE)
ind
print(ind)
source('~/Documents/github/hCoV-19_WA/scripts/plotTree.R', echo=TRUE)
i
i
tr$tip.label[i]
which(meta.wa$strain==tr$tip.label[i])
ind
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
which(meta.wa$strain==tr$tip.label[i])
svwhich(meta.wa$strain==tr$tip.label[i])which(meta.wa$strain==tr$tip.label[i])    plot(pl)
plot(pl)
plot(pl)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_geo.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
mrsi$filename
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
mrsi$filename
t = read.table(paste(path,'/out/', mrsi[i,'filename'], '.log',sep=""), sep="\t", header=T)
paste(path,'/out/', mrsi[i,'filename'], '.log',sep="")
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
paste(path,'/out/', mrsi[i,'filename'], '.log',sep="")
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
t = read.table(paste(path,'/out/', mrsi[i,'filename'], '.log',sep=""), sep="\t", header=T)
t = read.table(paste(path,'/out/', mrsi[i,'filename'], '.log',sep=""), sep="\t", header=T)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
p = ggplot(data=dat.bdsky[which(dat.bdsky$timeframe=="Yakima"),]) +
geom_ribbon(aes(x=time, ymin=Ne.lower, ymax=Ne.upper, fill=timeframe), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=Ne.ll, ymax=Ne.uu, fill=timeframe), alpha=0.8) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
scale_fill_manual(name="Dataset:", values = c("WA w/o Yakima"=both_clades_col, "614D"=d_clade_col, "614G"=g_clade_col, "Yakima"=yakima_col))+
# geom_line(data=subset[which(subset$sub_region_2!="Snohomish County" & subset$sub_region_2!="Skagit County"),], aes(x=date, y=val/30+2.5, linetype=sub_region_2,group=sub_region_2))+
# scale_linetype(name="Mobility in County:")+
scale_y_continuous(sec.axis = sec_axis(~ .*30 - 75, name="workplace mobility")) +
theme_minimal() +
# theme(legend.position = "none") +
xlab("") +
ylab("effective reproduction number")+
coord_cartesian(ylim=c(0,3)) +
geom_vline(xintercept=vline1, alpha=0.5)+
geom_vline(xintercept=vline2, alpha=0.5)+
geom_vline(xintercept=vline3, alpha=0.5)
plot(p)
ggsave(plot=p + theme(legend.position = "none"), file=paste(path, 'figures/bdsky_R0_mobility_yakima.pdf', sep='/'), height=2.5,width=6)
ggsave(plot=p, file=paste(path, 'figures/bdsky_R0_mobility_yakima_legend.pdf', sep='/'), height=2.5,width=4)
p = ggplot(data=growth_tmp[which(growth_tmp$method=="skygrowth" & growth_tmp$timeframe!="Yakima"), ]) +
geom_ribbon(aes(x=time, ymin=R.lower, ymax=R.upper, fill=timeframe), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=R.ll, ymax=R.uu, fill=timeframe), alpha=0.8) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
scale_fill_manual(name="Dataset:", values = c("WA w/o Yakima"=both_clades_col, "614D"=d_clade_col, "614G"=g_clade_col, "Yakima"=yakima_col))+
scale_y_continuous(sec.axis = sec_axis(~ .*30 - 75, name="workplace mobility")) +
# geom_line(data=subset[which(subset$sub_region_2!="Yakima County"),], aes(x=date, y=val/30+2.5, linetype=sub_region_2,group=sub_region_2))+
scale_linetype(name="Mobility in County:")+
theme_minimal() +
# theme(legend.position = "none") +
xlab("") +
ylab("effective reproduction number")+
coord_cartesian(ylim=c(0,5)) +
geom_vline(xintercept=vline1, alpha=0.5)+
geom_vline(xintercept=vline2, alpha=0.5)+
geom_vline(xintercept=vline3, alpha=0.5)
plot(p)
# ggsave(plot=p, file=paste(path, 'figures/coal_R0_mobility_withlegend.pdf', sep='/'), height=2.5,width=6)
ggsave(plot=p + theme(legend.position = "none"), file=paste(path, 'figures/coal_R0_mobility.pdf', sep='/'), height=2.5,width=6)
p = ggplot(data=dat.bdsky_tmp[which(dat.bdsky_tmp$timeframe!="Yakima"),]) +
geom_ribbon(aes(x=time, ymin=Ne.lower, ymax=Ne.upper, fill=timeframe), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=Ne.ll, ymax=Ne.uu, fill=timeframe), alpha=0.8) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
scale_fill_manual(name="Dataset:", values = c("WA w/o Yakima"=both_clades_col, "614D"=d_clade_col, "614G"=g_clade_col, "Yakima"=yakima_col))+
scale_y_continuous(sec.axis = sec_axis(~ .*30 - 75, name="workplace mobility")) +
# geom_line(data=subset[which(subset$sub_region_2!="Yakima County"),], aes(x=date, y=val/30+2.5, linetype=sub_region_2,group=sub_region_2))+
scale_linetype(name="Mobility in County:")+
theme_minimal() +
theme(legend.position="bottom", legend.box = "vertical") +
xlab("") +
ylab("effective reproduction number")+
coord_cartesian(ylim=c(0,5)) +
geom_vline(xintercept=vline1, alpha=0.5)+
geom_vline(xintercept=vline2, alpha=0.5)+
geom_vline(xintercept=vline3, alpha=0.5)
plot(p)
ggsave(plot=p + ylab("")+scale_y_continuous(sec.axis = sec_axis(~ ., name="")), file=paste(path, 'figures/bdsky_R0_mobility_withlegend.pdf', sep='/'), height=1.5,width=8)
ggsave(plot=p +theme(legend.position="right", legend.box = "horizontal"), file=paste(path, 'figures/bdsky_R0_mobility_withlegend2.pdf', sep='/'), height=4,width=6)
ggsave(plot=p+theme(legend.position="none"), file=paste(path, 'figures/bdsky_R0_mobility.pdf', sep='/'), height=2.5,width=6)
p = ggplot(data=dat.bdsky_tmp[which(dat.bdsky_tmp$timeframe!="Yakima"),]) +
# geom_ribbon(aes(x=time, ymin=Ne.lower, ymax=Ne.upper, fill=timeframe), alpha=0.2) +
# geom_ribbon(aes(x=time, ymin=Ne.ll, ymax=Ne.uu, fill=timeframe), alpha=0.8) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
scale_fill_manual(name="Dataset:", values = c("WA w/o Yakima"=both_clades_col, "614D"=d_clade_col, "614G"=g_clade_col, "Yakima"=yakima_col))+
scale_y_continuous(sec.axis = sec_axis(~ .*30 - 75, name="workplace mobility")) +
geom_line(data=subset[which(subset$sub_region_2!="Yakima County"),], aes(x=date, y=val/30+2.5, linetype=sub_region_2,group=sub_region_2))+
scale_linetype(name="Mobility in County:")+
theme_minimal() +
theme(legend.position="bottom", legend.box = "vertical") +
xlab("") +
ylab("effective reproduction number")+
coord_cartesian(ylim=c(0,5)) +
geom_vline(xintercept=vline1, alpha=0.5)+
geom_vline(xintercept=vline2, alpha=0.5)+
geom_vline(xintercept=vline3, alpha=0.5)
plot(p)
ggsave(plot=p + ylab("")+scale_y_continuous(sec.axis = sec_axis(~ ., name="")), file=paste(path, 'figures/bdsky_R0_mobility_withlegend.pdf', sep='/'), height=1.5,width=8)
ggsave(plot=p +theme(legend.position="right", legend.box = "horizontal"), file=paste(path, 'figures/bdsky_R0_mobility_withlegend2.pdf', sep='/'), height=4,width=6)
ggsave(plot=p+theme(legend.position="none"), file=paste(path, 'figures/bdsky_R0_mobility.pdf', sep='/'), height=2.5,width=6)
p = ggplot(data=dat.bdsky_tmp[which(dat.bdsky_tmp$timeframe!="Yakima"),]) +
geom_ribbon(aes(x=time, ymin=Ne.lower, ymax=Ne.upper, fill=timeframe), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=Ne.ll, ymax=Ne.uu, fill=timeframe), alpha=0.8) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
scale_fill_manual(name="Dataset:", values = c("WA w/o Yakima"=both_clades_col, "614D"=d_clade_col, "614G"=g_clade_col, "Yakima"=yakima_col))+
scale_y_continuous(sec.axis = sec_axis(~ .*30 - 75, name="workplace mobility")) +
geom_line(data=subset[which(subset$sub_region_2!="Yakima County"),], aes(x=date, y=val/30+2.5, linetype=sub_region_2,group=sub_region_2))+
scale_linetype(name="Mobility in County:")+
theme_minimal() +
theme(legend.position="bottom", legend.box = "vertical") +
xlab("") +
ylab("effective reproduction number")+
coord_cartesian(ylim=c(0,5))
#   geom_vline(xintercept=vline1, alpha=0.5)+
# geom_vline(xintercept=vline2, alpha=0.5)+
# geom_vline(xintercept=vline3, alpha=0.5)
plot(p)
ggsave(plot=p + ylab("")+scale_y_continuous(sec.axis = sec_axis(~ ., name="")), file=paste(path, 'figures/bdsky_R0_mobility_withlegend.pdf', sep='/'), height=1.5,width=8)
ggsave(plot=p +theme(legend.position="right", legend.box = "horizontal"), file=paste(path, 'figures/bdsky_R0_mobility_withlegend2.pdf', sep='/'), height=4,width=6)
ggsave(plot=p+theme(legend.position="none"), file=paste(path, 'figures/bdsky_R0_mobility.pdf', sep='/'), height=2.5,width=6)
p = ggplot(data=dat.bdsky_tmp[which(dat.bdsky_tmp$timeframe!="Yakima"),]) +
geom_ribbon(aes(x=time, ymin=Ne.lower, ymax=Ne.upper, fill=timeframe), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=Ne.ll, ymax=Ne.uu, fill=timeframe), alpha=0.8) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
scale_fill_manual(name="Dataset:", values = c("WA w/o Yakima"=both_clades_col, "614D"=d_clade_col, "614G"=g_clade_col, "Yakima"=yakima_col))+
scale_y_continuous(sec.axis = sec_axis(~ .*30 - 75, name="workplace mobility")) +
# geom_line(data=subset[which(subset$sub_region_2!="Yakima County"),], aes(x=date, y=val/30+2.5, linetype=sub_region_2,group=sub_region_2))+
scale_linetype(name="Mobility in County:")+
theme_minimal() +
theme(legend.position="bottom", legend.box = "vertical") +
xlab("") +
ylab("effective reproduction number")+
coord_cartesian(ylim=c(0,5))
plot(p)
ggsave(plot=p + ylab("")+scale_y_continuous(sec.axis = sec_axis(~ ., name="")), file=paste(path, 'figures/bdsky_R0_mobility_withlegend.pdf', sep='/'), height=1.5,width=8)
ggsave(plot=p +theme(legend.position="right", legend.box = "horizontal"), file=paste(path, 'figures/bdsky_R0_mobility_withlegend2.pdf', sep='/'), height=4,width=6)
ggsave(plot=p+theme(legend.position="none"), file=paste(path, 'figures/bdsky_R0_mobility.pdf', sep='/'), height=2.5,width=6)
